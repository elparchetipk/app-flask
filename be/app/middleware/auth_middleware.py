"""
üéì MIDDLEWARE DE AUTENTICACI√ìN - GU√çA EDUCATIVA FLASK

Este middleware protege rutas que requieren autenticaci√≥n JWT.
Implementa el patr√≥n Decorator para validar tokens de forma transparente.

¬øQu√© es middleware?
- C√≥digo que se ejecuta ANTES de la funci√≥n principal
- Intercepta requests para validar, transformar, etc.
- Reutilizable en m√∫ltiples rutas

DIFERENCIAS CON EXPRESS.JS:
- Flask usa decoradores (@require_auth) en lugar de middleware en cadena
- @wraps preserva metadatos de la funci√≥n original
- current_app en lugar de process.env para configuraci√≥n
- request global de Flask en lugar de par√°metro req
"""

import jwt
from functools import wraps
from flask import current_app, jsonify, request
from app.models.user import User


def require_auth(f):
    """
    üîê DECORADOR DE AUTENTICACI√ìN
    
    Este decorador protege rutas verificando tokens JWT v√°lidos.
    
    ¬øC√≥mo funciona un decorador?
    1. Se ejecuta ANTES que la funci√≥n protegida
    2. Verifica el token JWT del header Authorization  
    3. Si es v√°lido, ejecuta la funci√≥n original
    4. Si no es v√°lido, retorna error 401
    
    @param f: Funci√≥n a proteger (controlador)
    @return: Funci√≥n decorada con validaci√≥n de autenticaci√≥n
    """
    @wraps(f)  # Preserva metadatos de la funci√≥n original
    def decorated_function(*args, **kwargs):
        token = None
        
        # üîç EXTRAER TOKEN DEL HEADER
        # Formato esperado: "Authorization: Bearer <jwt-token>"
        auth_header = request.headers.get('Authorization')
        if auth_header:
            try:
                # Separar "Bearer" del token actual
                token = auth_header.split(' ')[1]  # [0]="Bearer", [1]="token"
            except IndexError:
                return jsonify({
                    'error': 'Formato de token inv√°lido'
                }), 401
        
        # ‚ùå VALIDAR PRESENCIA DE TOKEN
        if not token:
            return jsonify({
                'error': 'Token de autorizaci√≥n requerido'
            }), 401
        
        try:
            # üîì DECODIFICAR Y VERIFICAR TOKEN JWT
            # jwt.decode verifica firma, expiraci√≥n y formato autom√°ticamente
            payload = jwt.decode(
                token,
                current_app.config['JWT_SECRET_KEY'],  # Clave secreta de la app
                algorithms=['HS256']  # Algoritmo de verificaci√≥n
            )
            
            # üîç VERIFICAR QUE EL USUARIO EXISTE
            # Validamos que el user_id del token corresponde a un usuario real
            user = User.find_by_id(payload['user_id'])
            if not user:
                return jsonify({'error': 'Usuario no encontrado'}), 401
            
            # ‚úÖ AGREGAR USER_ID AL REQUEST
            # Permite que el controlador acceda al ID del usuario autenticado
            request.user_id = payload['user_id']
            
        except jwt.ExpiredSignatureError:
            # ‚è∞ TOKEN EXPIRADO
            # El token era v√°lido pero ya venci√≥ (ver JWT_ACCESS_TOKEN_EXPIRES)
            return jsonify({
                'error': 'Token expirado'
            }), 401
        except jwt.InvalidTokenError:
            # üö´ TOKEN INV√ÅLIDO
            # Token malformado, firma incorrecta, o algoritmo no soportado
            return jsonify({
                'error': 'Token inv√°lido'
            }), 401
        except Exception as e:
            # üêõ ERROR INESPERADO
            # Log del error para debugging
            current_app.logger.error(f'Error verificando token: {str(e)}')
            return jsonify({
                'error': 'Error verificando autenticaci√≥n'
            }), 401
        
        # ‚úÖ EJECUTAR FUNCI√ìN ORIGINAL
        # Si llegamos aqu√≠, el token es v√°lido y el usuario existe
        return f(*args, **kwargs)
    
    return decorated_function

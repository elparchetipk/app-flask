"""
üéì CONTROLADOR DE AUTENTICACI√ìN - GU√çA EDUCATIVA FLASK

Este archivo contiene toda la l√≥gica de negocio para manejar autenticaci√≥n.
Implementa los RF-001 (Registro) y RF-002 (Login) definidos en la documentaci√≥n.

¬øPor qu√© separamos en controladores?
- Principio de Responsabilidad √önica: cada archivo tiene una funci√≥n espec√≠fica
- Facilita el mantenimiento y testing
- Hace el c√≥digo m√°s legible y reutilizable

DIFERENCIAS CON EXPRESS.JS:
- Flask usa decoradores en lugar de middleware en cadena
- request.get_json() en lugar de req.body
- jsonify() para respuestas JSON autom√°ticas
- Variables impl√≠citas como current_app (Application Context)
"""

import jwt
from datetime import datetime, timedelta
from flask import current_app, jsonify, request
from app.models.user import User
from app.utils.validation import validate_email, validate_password


def register():
    """
    üìù RF-001: REGISTRO DE USUARIO
    
    Endpoint: POST /api/auth/register
    
    Flujo del registro:
    1. Validar datos de entrada (validadores custom)
    2. Verificar que el email no exista (unicidad)  
    3. Crear usuario con password encriptado (werkzeug.security)
    4. Generar JWT token para autenticaci√≥n autom√°tica
    5. Retornar datos del usuario (sin password por seguridad)
    
    ¬øPor qu√© try/except?
    - Las operaciones de BD pueden fallar
    - Manejo elegante de errores
    - Logging para debugging
    """
    try:
        # üìä EXTRACCI√ìN DE DATOS
        # request.get_json() obtiene el JSON del body de la petici√≥n
        data = request.get_json()
        
        # üîç VALIDACI√ìN DE DATOS REQUERIDOS
        # Verificamos que existan todos los campos necesarios
        if not data or not all(k in data for k in ('username', 'email', 'password')):
            return jsonify({
                'error': 'Username, email y password son requeridos'
            }), 400
        
        # üßπ LIMPIEZA Y NORMALIZACI√ìN DE DATOS
        username = data['username'].strip()
        email = data['email'].strip().lower()  # Email siempre en min√∫sculas
        password = data['password']
        
        # üîç VALIDACIONES DE NEGOCIO
        # Validaci√≥n de longitud de username
        if len(username) < 3:
            return jsonify({
                'error': 'El username debe tener al menos 3 caracteres'
            }), 400
        
        # Validaci√≥n de formato de email usando regex
        if not validate_email(email):
            return jsonify({
                'error': 'El email no es v√°lido'
            }), 400
        
        # Validaci√≥n de fortaleza de contrase√±a
        if not validate_password(password):
            return jsonify({
                'error': 'La contrase√±a debe tener al menos 8 caracteres, una may√∫scula, una min√∫scula y un n√∫mero'
            }), 400
        
        # üîé VERIFICAR UNICIDAD DEL EMAIL
        # Importante: verificar antes de crear para evitar duplicados
        if User.find_by_email(email):
            # Status 409: Conflict - el recurso ya existe
            return jsonify({
                'error': 'El email ya est√° registrado'
            }), 409
        
        # üë§ CREAR NUEVO USUARIO
        # El modelo User se encarga de encriptar el password autom√°ticamente
        user = User.create(username, email, password)
        if not user:
            return jsonify({
                'error': 'Error al crear el usuario'
            }), 500
        
        # üîê GENERAR TOKEN JWT
        # Creamos un token para autenticaci√≥n autom√°tica despu√©s del registro
        token = generate_jwt_token(user.id)
        
        # ‚úÖ RESPUESTA EXITOSA (RF-001)
        # Status 201: Created - recurso creado exitosamente
        return jsonify({
            'message': 'Usuario registrado exitosamente',
            'user': user.to_dict(),  # Datos del usuario sin contrase√±a
            'token': token  # Token para autenticaci√≥n inmediata
        }), 201
        
    except Exception as e:
        # üìù LOGGING DE ERRORES
        # current_app.logger permite logging en el contexto de Flask
        current_app.logger.error(f'Error en registro: {str(e)}')
        return jsonify({
            'error': 'Error interno del servidor'
        }), 500


def login():
    """
    üîê RF-002: AUTENTICACI√ìN DE USUARIO
    
    Endpoint: POST /api/auth/login
    
    Flujo del login:
    1. Validar datos de entrada (email y password)
    2. Buscar usuario por email
    3. Verificar contrase√±a usando hash bcrypt
    4. Generar JWT token si las credenciales son v√°lidas
    5. Retornar datos del usuario y token
    
    ¬øPor qu√© no revelamos si es email o password incorrecto?
    - Seguridad: evita ataques de enumeraci√≥n de usuarios
    - Mensaje gen√©rico "credenciales inv√°lidas"
    """
    try:
        # üìä EXTRACCI√ìN DE DATOS
        data = request.get_json()
        
        # üîç VALIDACI√ìN DE DATOS REQUERIDOS
        if not data or not all(k in data for k in ('email', 'password')):
            return jsonify({
                'error': 'Email y password son requeridos'
            }), 400
        
        # üßπ LIMPIEZA DE DATOS
        email = data['email'].strip().lower()
        password = data['password']
        
        # üîé BUSCAR USUARIO POR EMAIL
        user = User.find_by_email(email)
        
        # üîê VERIFICAR CREDENCIALES
        # user.check_password() usa werkzeug.security para verificar el hash
        if not user or not user.check_password(password):
            # Status 401: Unauthorized - credenciales inv√°lidas
            # Mensaje gen√©rico por seguridad (no revelamos qu√© campo es incorrecto)
            return jsonify({
                'error': 'Credenciales inv√°lidas'
            }), 401
        
        # üîê GENERAR TOKEN JWT
        token = generate_jwt_token(user.id)
        
        # ‚úÖ RESPUESTA EXITOSA (RF-002)
        return jsonify({
            'message': 'Login exitoso',
            'user': user.to_dict(),
            'token': token
        }), 200
        
    except Exception as e:
        current_app.logger.error(f'Error en login: {str(e)}')
        return jsonify({
            'error': 'Error interno del servidor'
        }), 500


def get_profile():
    """
    üë§ OBTENER PERFIL DEL USUARIO AUTENTICADO
    
    Endpoint: GET /api/auth/profile
    Headers: Authorization: Bearer <token>
    
    Esta funci√≥n requiere autenticaci√≥n (middleware @require_auth).
    El middleware ya verific√≥ el token y estableci√≥ request.user_id
    
    ¬øC√≥mo funciona el middleware en Flask?
    - Los decoradores modifican el comportamiento de las funciones
    - @require_auth verifica el JWT antes de ejecutar esta funci√≥n
    - Si el token es inv√°lido, el middleware retorna error 401
    """
    try:
        # üîç OBTENER USER_ID DEL MIDDLEWARE
        # El middleware @require_auth ya verific√≥ el token y estableci√≥ request.user_id
        user_id = getattr(request, 'user_id', None)
        if not user_id:
            return jsonify({
                'error': 'Token de autorizaci√≥n requerido'
            }), 401
        
        # üîé BUSCAR USUARIO POR ID
        user = User.find_by_id(user_id)
        if not user:
            return jsonify({
                'error': 'Usuario no encontrado'
            }), 404
        
        # ‚úÖ RESPUESTA EXITOSA
        return jsonify({
            'user': user.to_dict()
        }), 200
        
    except Exception as e:
        current_app.logger.error(f'Error obteniendo perfil: {str(e)}')
        return jsonify({
            'error': 'Error interno del servidor'
        }), 500


def generate_jwt_token(user_id):
    """
    üîê GENERACI√ìN DE JWT TOKEN - GU√çA EDUCATIVA
    
    ¬øQu√© es JWT?
    JSON Web Token - Un est√°ndar para transmitir informaci√≥n de forma segura.
    Se compone de: Header.Payload.Signature
    
    ¬øPor qu√© usamos JWT?
    - Stateless: no necesitamos guardar sesiones en el servidor
    - Escalable: funciona en m√∫ltiples servidores  
    - Seguro: firmado criptogr√°ficamente
    - Self-contained: toda la informaci√≥n est√° en el token
    
    DIFERENCIAS CON EXPRESS.JS:
    - Flask usa current_app.config en lugar de process.env
    - datetime en lugar de strings para expiraci√≥n
    - Configuraci√≥n centralizada en config.py
    
    @param user_id: ID del usuario para incluir en el token
    @return: Token JWT firmado como string
    """
    # üìù PAYLOAD DEL TOKEN
    # Informaci√≥n que queremos incluir en el token
    payload = {
        'user_id': user_id,  # ID del usuario (no informaci√≥n sensible)
        'exp': datetime.utcnow() + current_app.config['JWT_ACCESS_TOKEN_EXPIRES'],  # Expiraci√≥n
        'iat': datetime.utcnow()  # Issued At - momento de creaci√≥n
    }
    
    # üîê FIRMAR EL TOKEN
    # current_app.config accede a la configuraci√≥n de Flask
    return jwt.encode(
        payload,
        current_app.config['JWT_SECRET_KEY'],  # Clave secreta (¬°NUNCA exponerla!)
        algorithm='HS256'  # Algoritmo de firma (HMAC SHA-256)
    )

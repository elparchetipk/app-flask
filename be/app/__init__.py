"""
üéì INICIALIZACI√ìN DE LA APLICACI√ìN FLASK - GU√çA EDUCATIVA

Este archivo implementa el patr√≥n Application Factory para crear la app Flask.
Es el punto de entrada principal donde se configuran todos los componentes.

¬øQu√© es el Application Factory Pattern?
- Funci√≥n que crea y configura la aplicaci√≥n Flask
- Permite m√∫ltiples configuraciones (dev, test, prod)
- Facilita testing con diferentes configuraciones
- Evita imports circulares y problemas de contexto

COMPONENTES CONFIGURADOS:
1. Configuraci√≥n (config.py)
2. CORS (Cross-Origin Resource Sharing)
3. Blueprints (rutas organizadas)
4. Base de datos (SQLite)

DIFERENCIAS CON EXPRESS.JS:
- Application Factory vs instancia directa
- app.config.from_object() vs require() de variables
- Blueprints vs express.Router()
- Application Context para operaciones de BD
"""

from flask import Flask
from flask_cors import CORS
from config.config import Config


def create_app(config_class=Config):
    """
    üè≠ FACTORY DE APLICACI√ìN FLASK
    
    Crea y configura una instancia de la aplicaci√≥n Flask.
    
    ¬øPor qu√© usar un factory?
    - Flexibilidad: diferentes configuraciones para dev/test/prod
    - Testing: crear apps temporales con configuraci√≥n espec√≠fica
    - Imports: evita problemas de dependencias circulares
    
    @param config_class: Clase de configuraci√≥n a usar (Config por defecto)
    @return: Instancia de Flask configurada y lista para usar
    """
    # üèóÔ∏è CREAR INSTANCIA FLASK
    app = Flask(__name__)
    
    # ‚öôÔ∏è CARGAR CONFIGURACI√ìN
    # from_object() carga todas las variables de la clase Config
    app.config.from_object(config_class)
    
    # üåê CONFIGURAR CORS (Cross-Origin Resource Sharing)
    # Permite que el frontend React se comunique con el backend Flask
    CORS(app, resources={
        r"/api/*": {  # Solo rutas que empiecen con /api/
            "origins": ["http://localhost:3000", "http://localhost:5173"],  # Puertos de dev
            "methods": ["GET", "POST", "PUT", "DELETE", "OPTIONS"],  # M√©todos HTTP permitidos
            "allow_headers": ["Content-Type", "Authorization"]  # Headers permitidos
        }
    })
    
    # üìã REGISTRAR BLUEPRINTS
    # Los blueprints organizan las rutas en m√≥dulos l√≥gicos
    from app.routes.auth_routes import auth_bp
    app.register_blueprint(auth_bp, url_prefix='/api/auth')  # Prefijo para todas las rutas
    
    # üóÑÔ∏è CONFIGURAR BASE DE DATOS
    # Application Context necesario para acceder a app.config en init_db()
    from app.models.user import init_db
    with app.app_context():
        init_db()  # Crear tablas si no existen
    
    return app

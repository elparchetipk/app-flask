"""
üéì UTILIDADES DE VALIDACI√ìN - GU√çA EDUCATIVA FLASK

Este m√≥dulo contiene funciones helper para validar datos de entrada.
Centralizar validaciones mejora la consistencia y reutilizaci√≥n.

¬øPor qu√© separar validaciones?
- Reutilizaci√≥n: mismas reglas en m√∫ltiples lugares
- Mantenibilidad: cambiar reglas en un solo lugar
- Testeo: f√°cil probar funciones aisladas
- Legibilidad: controladores m√°s limpios

DIFERENCIAS CON EXPRESS.JS:
- Python usa re (regex) nativo en lugar de librer√≠as externas
- Funciones puras en lugar de middleware de validaci√≥n
- Validaci√≥n manual vs express-validator autom√°tico
"""

import re


def validate_email(email):
    """
    üìß VALIDADOR DE EMAIL
    
    Valida que el email tenga un formato correcto usando regex.
    
    ¬øPor qu√© regex para emails?
    - Est√°ndar RFC 5322 es muy complejo para implementar completo
    - Regex cubre 99% de casos de uso reales
    - Balance entre simplicidad y funcionalidad
    
    PATR√ìN EXPLICADO:
    ^[a-zA-Z0-9._%+-]+  - Parte local: letras, n√∫meros, algunos s√≠mbolos
    @                   - Arroba obligatoria
    [a-zA-Z0-9.-]+      - Dominio: letras, n√∫meros, gui√≥n, punto
    \\.                 - Punto obligatorio antes del TLD
    [a-zA-Z]{2,}$       - TLD: al menos 2 letras
    
    @param email: String del email a validar
    @return: True si el formato es v√°lido, False si no
    """
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(pattern, email) is not None


def validate_password(password):
    """
    üîê VALIDADOR DE CONTRASE√ëA SEGURA
    
    Implementa pol√≠ticas de seguridad para contrase√±as fuertes.
    
    REQUISITOS DE SEGURIDAD:
    - Al menos 8 caracteres (longitud m√≠nima)
    - Al menos una letra may√∫scula (A-Z)
    - Al menos una letra min√∫scula (a-z)  
    - Al menos un n√∫mero (0-9)
    
    ¬øPor qu√© estos requisitos?
    - 8+ caracteres: dificulta ataques de fuerza bruta
    - May√∫sculas/min√∫sculas: aumenta complejidad
    - N√∫meros: incrementa espacio de b√∫squeda
    - Balance entre seguridad y usabilidad
    
    @param password: String de la contrase√±a a validar
    @return: True si cumple todos los requisitos, False si no
    """
    # ‚úÖ VALIDAR LONGITUD M√çNIMA
    if len(password) < 8:
        return False
    
    # üîç BUSCAR PATRONES REQUERIDOS
    has_upper = re.search(r'[A-Z]', password)      # Al menos una may√∫scula
    has_lower = re.search(r'[a-z]', password)      # Al menos una min√∫scula  
    has_digit = re.search(r'\d', password)         # Al menos un d√≠gito
    
    # ‚úÖ VERIFICAR QUE TODOS LOS REQUISITOS SE CUMPLAN
    # all() retorna True solo si todos los elementos son True
    return all([has_upper, has_lower, has_digit])


def validate_username(username):
    """
    Valida el username:
    - Entre 3 y 30 caracteres
    - Solo letras, n√∫meros y guiones bajos
    """
    if not username or len(username) < 3 or len(username) > 30:
        return False
    
    pattern = r'^[a-zA-Z0-9_]+$'
    return re.match(pattern, username) is not None
